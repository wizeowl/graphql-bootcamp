type Query {
    me: User!
    users(query: String): [User]
    posts(query: String): [Post]
    comments(query: String): [Comment]
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    updateUser(id: ID!, data: UpdateUserInput!): User!
    deleteUser(id: ID!): User!
    login(data: LoginInput!): AuthPayload!

    createPost(data: CreatePostInput!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    deletePost(id: ID!): Post!

    createComment(data: CreateCommentInput!): Comment!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
}

type Subscription {
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

type AuthPayload {
    user: User!
    token: String!
}

input CreateUserInput { name: String!, email: String!, password: String! }

input UpdateUserInput { name: String, email: String }

input LoginInput { password: String!, email: String! }

input CreatePostInput { title: String!, body: String, published: Boolean, author: ID! }

input UpdatePostInput { title: String, body: String, published: Boolean }

input CreateCommentInput { text: String!, post: ID!, author: ID! }

input UpdateCommentInput { text: String }

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    post: Post!
    author: User!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    node: Post
    mutation: MutationType!
}

type CommentSubscriptionPayload {
    node: Comment
    mutation: MutationType!
}
